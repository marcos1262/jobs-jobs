//
//  Mocks.generated.swift
//  Interfaces
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import Interfaces
@testable import Mockingbird
import Combine
import CombineSchedulers
import Foundation
import Swift

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked AppSchedulerProviding
public final class AppSchedulerProvidingMock: Interfaces.AppSchedulerProviding, Mockingbird.Mock {
  typealias MockingbirdSupertype = Interfaces.AppSchedulerProviding
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "Interfaces"])

  // MARK: Mocked mainScheduler
  public var `mainScheduler`: AnySchedulerOf<DispatchQueue> {
    get {
      return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "mainScheduler.getter", setterSelectorName: "mainScheduler.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((AnySchedulerOf<DispatchQueue>).self))) {
        self.mockingbirdContext.recordInvocation($0)
        let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
        if let mkbImpl = mkbImpl as? () -> AnySchedulerOf<DispatchQueue> { return mkbImpl() }
        if let mkbImpl = mkbImpl as? () -> Any { return Mockingbird.dynamicCast(mkbImpl()) as AnySchedulerOf<DispatchQueue> }
        for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
          switch mkbTargetBox.target {
          case .super:
            break
          case .object(let mkbObject):
            guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
            let mkbValue: AnySchedulerOf<DispatchQueue> = mkbObject.`mainScheduler`
            self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
            return mkbValue
          }
        }
        if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnySchedulerOf<DispatchQueue>).self) { return mkbValue }
        self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
      }
    }
  }

  public func getMainScheduler() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> AnySchedulerOf<DispatchQueue>, AnySchedulerOf<DispatchQueue>> {
    return Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> AnySchedulerOf<DispatchQueue>, AnySchedulerOf<DispatchQueue>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "mainScheduler.getter", setterSelectorName: "mainScheduler.setter", selectorType: Mockingbird.SelectorType.getter, arguments: [], returnType: Swift.ObjectIdentifier((AnySchedulerOf<DispatchQueue>).self)))
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    AppSchedulerProvidingMock.mockingbirdContext.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `AppSchedulerProviding`.
public func mock(_ type: Interfaces.AppSchedulerProviding.Protocol, file: StaticString = #file, line: UInt = #line) -> AppSchedulerProvidingMock {
  return AppSchedulerProvidingMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked DomainApiError
public final class DomainApiErrorMock: Mockingbird.Mock {
  typealias MockingbirdSupertype = Interfaces.DomainApiError
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "Interfaces"])
}

// MARK: - Mocked JobsApiProtocol
public final class JobsApiProtocolMock: Interfaces.JobsApiProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = Interfaces.JobsApiProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "Interfaces"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    JobsApiProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getJobsList`()
  public func `getJobsList`() -> AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getJobsList`() -> AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError> = mkbObject.`getJobsList`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getJobsList`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>, AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>, AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getJobsList`() -> AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<Interfaces.JobsListDTO, Interfaces.JobsApiError>).self)))
  }
}

/// Returns a concrete mock of `JobsApiProtocol`.
public func mock(_ type: Interfaces.JobsApiProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> JobsApiProtocolMock {
  return JobsApiProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
